datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  password String?

  role String @default("user")

  createdCustomers Customer[]
  createdTips      Tip[]

  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id @map("_id")
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String   @db.ObjectId
  expiresAt DateTime

  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@unique([token])
  @@map("sessions")
}

model InvitationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invitationCodes")
}

model Customer {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  carPlate            String   @unique
  customerDescription String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tips                Tip[]
  createdBy           User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById         String?  @db.ObjectId

  @@map("customers")
}

model Tip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tip         Int
  tipComment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(references: [id], fields: [customerId], onDelete: Cascade)
  customerId  String   @db.ObjectId
  user        User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?  @db.ObjectId

  @@map("tips")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
